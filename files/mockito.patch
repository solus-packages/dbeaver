From 141080857621c98c8fe84a069cbcc50ee033e6d2 Mon Sep 17 00:00:00 2001
From: Serge Rider <serge@jkiss.org>
Date: Fri, 29 Jul 2022 16:02:47 +0300
Subject: [PATCH] dbeaver/dbeaver#17201 Upgrade Mockito engine

---
 .../META-INF/MANIFEST.MF                      |  2 +-
 .../GreenplumExternalTableManager2Test.java   |  6 +--
 .../edit/GreenplumTableManagerTest.java       |  6 +--
 .../model/GreenplumExternalTableTest.java     |  6 +--
 .../model/GreenplumFunctionTest.java          | 14 +++----
 .../greenplum/model/GreenplumTableTest.java   |  6 +--
 .../model/GreenplumWithClauseBuilderTest.java |  2 +-
 .../model/PostgreServerGreenplumTest.java     |  6 +--
 .../META-INF/MANIFEST.MF                      |  2 +-
 .../model/OracleAlterTableColumnTest.java     |  2 +-
 .../ext/oracle/model/OracleBaseTableTest.java |  2 +-
 .../model/OracleDialectFunctionsTest.java     |  4 +-
 .../META-INF/MANIFEST.MF                      |  2 +-
 .../postgresql/PostgreValueParserTest.java    | 37 +++++++++----------
 .../model/PostgreDialectFunctionsTest.java    |  4 +-
 .../model/PostgreServerExtensionBaseTest.java |  2 +-
 .../model/PostgreTableBaseTest.java           | 10 ++---
 .../META-INF/MANIFEST.MF                      |  2 +-
 .../parser/common/test/ParserTest.java        |  2 +-
 .../META-INF/MANIFEST.MF                      |  2 +-
 .../org/jkiss/dbeaver/model/DBUtilsTest.java  |  2 +-
 .../dbeaver/model/DBValueFormattingTest.java  |  6 +--
 .../dbeaver/model/DataTypeConverterTest.java  |  4 +-
 .../EpochTimeAttributeTransformerTest.java    |  2 +-
 .../builder/DatabaseContainerBuilder.java     |  4 +-
 .../builder/SchemaContainerBuilder.java       |  4 +-
 .../TableAttributeContainerBuilder.java       |  4 +-
 .../builder/TableContainerBuilder.java        |  4 +-
 .../builder/request/RequestBuilder.java       |  4 +-
 .../tokenized/SQLFormatterTokenizedTest.java  | 12 +++---
 .../parser/SQLScriptParserGenericsTest.java   |  9 +++--
 .../model/sql/parser/SQLScriptParserTest.java |  6 +--
 .../parser/TokenPredicatesConditionTest.java  |  8 ++--
 .../dbeaver/model/sql/parser/TrieTest.java    |  2 +-
 .../tools/transfer/CSVImporterTest.java       |  2 +-
 35 files changed, 96 insertions(+), 96 deletions(-)

diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.ext.greenplum.test/META-INF/MANIFEST.MF
index ae05443fe6d..8430f8323f3 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/META-INF/MANIFEST.MF
@@ -10,7 +10,7 @@ Bundle-ClassPath: .
 Fragment-Host: org.jkiss.dbeaver.ext.greenplum
 Bundle-ActivationPolicy: lazy
 Require-Bundle: org.junit,
- org.mockito.mockito-all,
+ org.mockito.mockito-core,
  org.jkiss.dbeaver.headless,
  org.jkiss.dbeaver.model,
  org.jkiss.dbeaver.registry,
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumExternalTableManager2Test.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumExternalTableManager2Test.java
index aa00d28863f..9a06c0310d5 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumExternalTableManager2Test.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumExternalTableManager2Test.java
@@ -27,10 +27,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -60,7 +60,7 @@ public void setUp() {
         Mockito.when(mockDataSource.getSQLDialect()).thenReturn(new PostgreDialect());
         Mockito.when(mockSchema.getDatabase()).thenReturn(mockDatabase);
         Mockito.when(mockSchema.getDataSource()).thenReturn(mockDataSource);
-        Mockito.when(mockDataSource.isServerVersionAtLeast(Matchers.anyInt(), Matchers.anyInt())).thenReturn(false);
+        Mockito.when(mockDataSource.isServerVersionAtLeast(ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt())).thenReturn(false);
         Mockito.when(mockDataSource.getServerType()).thenReturn(mockServerGreenplum);
 
         greenplumExternalTableManager = new GreenplumExternalTableManager();
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumTableManagerTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumTableManagerTest.java
index 207bd8dac20..32428f60814 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumTableManagerTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/edit/GreenplumTableManagerTest.java
@@ -28,10 +28,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -61,7 +61,7 @@ public void setUp() {
         Mockito.when(mockDataSource.getSQLDialect()).thenReturn(new PostgreDialect());
         Mockito.when(mockSchema.getDatabase()).thenReturn(mockDatabase);
         Mockito.when(mockSchema.getDataSource()).thenReturn(mockDataSource);
-        Mockito.when(mockDataSource.isServerVersionAtLeast(Matchers.anyInt(), Matchers.anyInt())).thenReturn(false);
+        Mockito.when(mockDataSource.isServerVersionAtLeast(ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt())).thenReturn(false);
         Mockito.when(mockDataSource.getServerType()).thenReturn(mockServerGreenplum);
 
         greenplumTableManager = new GreenplumTableManager();
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumExternalTableTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumExternalTableTest.java
index afaa8024919..a9c95fc3088 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumExternalTableTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumExternalTableTest.java
@@ -27,10 +27,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Matchers;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.SQLException;
 import java.util.Arrays;
@@ -81,7 +81,7 @@ public void setup() throws SQLException {
         Mockito.when(mockSchema.getTableCache()).thenReturn(mockTableCache);
         Mockito.when(mockDataSource.getSQLDialect()).thenReturn(new PostgreDialect());
         Mockito.when(mockDataSource.getServerType()).thenReturn(mockServerGreenplum);
-        Mockito.when(mockDataSource.isServerVersionAtLeast(Matchers.anyInt(), Matchers.anyInt())).thenReturn(false);
+        Mockito.when(mockDataSource.isServerVersionAtLeast(ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt())).thenReturn(false);
 
         Mockito.when(mockResults.getString("relname")).thenReturn(exampleTableName);
         Mockito.when(mockResults.getString("fmttype")).thenReturn(exampleFormatType);
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumFunctionTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumFunctionTest.java
index 0c3206b2092..2ac42710c0b 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumFunctionTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumFunctionTest.java
@@ -30,7 +30,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.SQLException;
 
@@ -69,19 +69,19 @@ public class GreenplumFunctionTest {
 
     @Before
     public void setUp() throws Exception {
-        Mockito.when(mockSchema.getDatabase()).thenReturn(mockDatabase);
+//        Mockito.when(mockSchema.getDatabase()).thenReturn(mockDatabase);
         Mockito.when(mockSchema.getDataSource()).thenReturn(mockDataSource);
         Mockito.when(mockSchema.getName()).thenReturn(exampleSchemaName);
-        Mockito.when(mockSchema.getTableCache()).thenReturn(mockTableCache);
-        Mockito.when(mockSchema.getConstraintCache()).thenReturn(mockConstraintCache);
+//        Mockito.when(mockSchema.getTableCache()).thenReturn(mockTableCache);
+//        Mockito.when(mockSchema.getConstraintCache()).thenReturn(mockConstraintCache);
 
         Mockito.when(mockDataSource.getServerType()).thenReturn(new PostgreServerGreenplum(mockDataSource));
         Mockito.when(mockDataSource.getSQLDialect()).thenReturn(new PostgreDialect());
         Mockito.when(mockDataSource.isServerVersionAtLeast(Mockito.anyInt(), Mockito.anyInt())).thenReturn(false);
-        Mockito.when(mockDataSource.getDefaultInstance()).thenReturn(mockDatabase);
+//        Mockito.when(mockDataSource.getDefaultInstance()).thenReturn(mockDatabase);
 
-        Mockito.when(mockDatabase.getName()).thenReturn(exampleDatabaseName);
-        Mockito.when(mockDatabase.getDefaultContext(Mockito.anyObject(), Mockito.anyBoolean())).thenReturn(mockContext);
+//        Mockito.when(mockDatabase.getName()).thenReturn(exampleDatabaseName);
+//        Mockito.when(mockDatabase.getDefaultContext(Mockito.any(), Mockito.anyBoolean())).thenReturn(mockContext);
 
         Mockito.when(mockResults.getString("proname")).thenReturn("sampleFunction");
         postgreLanguage = new PostgreLanguage(mockDatabase, mockResults);
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumTableTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumTableTest.java
index ac1a6f5ad84..c2a678788fe 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumTableTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumTableTest.java
@@ -29,7 +29,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.SQLException;
 import java.util.Collections;
@@ -74,7 +74,6 @@ public class GreenplumTableTest {
 
     @Before
     public void setUp() throws Exception {
-        Mockito.when(mockSchema.getDatabase()).thenReturn(mockDatabase);
         Mockito.when(mockSchema.getSchema()).thenReturn(mockSchema);
         Mockito.when(mockSchema.getDataSource()).thenReturn(mockDataSource);
         Mockito.when(mockSchema.getName()).thenReturn(exampleSchemaName);
@@ -86,8 +85,7 @@ public void setUp() throws Exception {
         Mockito.when(mockDataSource.getDefaultInstance()).thenReturn(mockDatabase);
         Mockito.when(mockDataSource.getServerType()).thenReturn(mockServerGreenplum);
 
-        Mockito.when(mockDatabase.getName()).thenReturn(exampleDatabaseName);
-        Mockito.when(mockDatabase.getDefaultContext(Mockito.anyObject(), Mockito.anyBoolean())).thenReturn(mockContext);
+        Mockito.when(mockDatabase.getDefaultContext(Mockito.any(), Mockito.anyBoolean())).thenReturn(mockContext);
         Mockito.when(mockDatabase.isInstanceConnected()).thenReturn(true);
 
         Mockito.when(mockResults.getString("relname")).thenReturn(exampleTableName);
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumWithClauseBuilderTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumWithClauseBuilderTest.java
index 1b43184749d..2df8b0f1343 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumWithClauseBuilderTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/GreenplumWithClauseBuilderTest.java
@@ -21,7 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.jkiss.dbeaver.ext.greenplum.model.GreenplumWithClauseBuilder.generateWithClause;
 import static org.junit.Assert.assertEquals;
diff --git a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/PostgreServerGreenplumTest.java b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/PostgreServerGreenplumTest.java
index 2ed08e4c8d6..11cbcb42c0d 100644
--- a/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/PostgreServerGreenplumTest.java
+++ b/test/org.jkiss.dbeaver.ext.greenplum.test/src/org/jkiss/dbeaver/ext/greenplum/model/PostgreServerGreenplumTest.java
@@ -27,11 +27,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.ArgumentMatchers;
 import org.mockito.InjectMocks;
-import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.SQLException;
 
@@ -55,7 +55,7 @@ public class PostgreServerGreenplumTest {
     @Before
     public void setup() throws SQLException {
         Mockito.when(mockSchema.getDataSource()).thenReturn(mockDataSource);
-        Mockito.when(mockDataSource.isServerVersionAtLeast(Matchers.anyInt(), Matchers.anyInt())).thenReturn(false);
+        Mockito.when(mockDataSource.isServerVersionAtLeast(ArgumentMatchers.anyInt(), ArgumentMatchers.anyInt())).thenReturn(false);
         Mockito.when(mockDataSource.getServerType()).thenReturn(server);
         Mockito.when(mockResults.getString("fmttype")).thenReturn("c");
         Mockito.when(mockResults.getString("urilocation")).thenReturn("gpfdist://filehost:8081/*.txt");
diff --git a/test/org.jkiss.dbeaver.ext.oracle.test/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.ext.oracle.test/META-INF/MANIFEST.MF
index a63f1e814c7..b446c584dd0 100644
--- a/test/org.jkiss.dbeaver.ext.oracle.test/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.ext.oracle.test/META-INF/MANIFEST.MF
@@ -12,7 +12,7 @@ Bundle-ActivationPolicy: lazy
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.junit,
- org.mockito.mockito-all,
+ org.mockito.mockito-core,
  org.apache.felix.scr,
  org.jkiss.dbeaver.headless,
  org.jkiss.dbeaver.model,
diff --git a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleAlterTableColumnTest.java b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleAlterTableColumnTest.java
index 6087794eeac..d1f89925a30 100644
--- a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleAlterTableColumnTest.java
+++ b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleAlterTableColumnTest.java
@@ -37,7 +37,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.Collections;
 import java.util.List;
diff --git a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleBaseTableTest.java b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleBaseTableTest.java
index 6072da65493..612bbe5630c 100644
--- a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleBaseTableTest.java
+++ b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleBaseTableTest.java
@@ -37,7 +37,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.Collections;
 import java.util.List;
diff --git a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleDialectFunctionsTest.java b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleDialectFunctionsTest.java
index 44bd8f1b11c..7dc3bf17f39 100644
--- a/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleDialectFunctionsTest.java
+++ b/test/org.jkiss.dbeaver.ext.oracle.test/src/org/jkiss/dbeaver/ext/oracle/model/OracleDialectFunctionsTest.java
@@ -25,7 +25,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 @RunWith(MockitoJUnitRunner.class)
 public class OracleDialectFunctionsTest {
@@ -59,7 +59,7 @@ public void generateCorrectDataTypeNameWithModifiersFromJSONDataType() {
     public void generateCorrectDataTypeNameFromNUMERICDataTypeWithModifiers() {
         Mockito.when(mockTypedObject.getTypeName()).thenReturn("numeric");
         Mockito.when(mockTypedObject.getPrecision()).thenReturn(null);
-        Mockito.when(mockTypedObject.getScale()).thenReturn(null);
+//        Mockito.when(mockTypedObject.getScale()).thenReturn(null);
         String actualDataType = dialect.convertExternalDataType(dialect, mockTypedObject, dataSource);
         Assert.assertEquals("NUMBER", actualDataType);
     }
diff --git a/test/org.jkiss.dbeaver.ext.postgresql.test/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.ext.postgresql.test/META-INF/MANIFEST.MF
index 3d8909ff0c9..e651f2c7564 100644
--- a/test/org.jkiss.dbeaver.ext.postgresql.test/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.ext.postgresql.test/META-INF/MANIFEST.MF
@@ -12,7 +12,7 @@ Bundle-ActivationPolicy: lazy
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.junit,
- org.mockito.mockito-all,
+ org.mockito.mockito-core,
  org.apache.felix.scr,
  org.jkiss.dbeaver.headless,
  org.jkiss.dbeaver.model,
diff --git a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/PostgreValueParserTest.java b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/PostgreValueParserTest.java
index 5b1f39185e7..f159c2e670d 100644
--- a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/PostgreValueParserTest.java
+++ b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/PostgreValueParserTest.java
@@ -22,7 +22,6 @@
 import org.jkiss.dbeaver.ext.postgresql.model.data.PostgreArrayValueHandler;
 import org.jkiss.dbeaver.model.DBPDataKind;
 import org.jkiss.dbeaver.model.data.DBDCollection;
-import org.jkiss.dbeaver.model.data.DBDDataFormatter;
 import org.jkiss.dbeaver.model.data.DBDDisplayFormat;
 import org.jkiss.dbeaver.model.data.DBDFormatSettings;
 import org.jkiss.dbeaver.model.exec.DBCException;
@@ -38,7 +37,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.Types;
 import java.util.*;
@@ -231,18 +230,18 @@ public void parseArrayString() throws DBCException {
     }
 
     private void setupGeneralWhenMocks() throws Exception {
-        Mockito.when(dataSource.getSQLDialect()).thenReturn(sqlDialect);
+//        Mockito.when(dataSource.getSQLDialect()).thenReturn(sqlDialect);
         Mockito.when(session.getProgressMonitor()).thenReturn(new VoidProgressMonitor());
 
-        Mockito.when(intItemType.getFullTypeName()).thenReturn("test_intItemType");
+//        Mockito.when(intItemType.getFullTypeName()).thenReturn("test_intItemType");
         Mockito.when(intItemType.getDataKind()).thenReturn(DBPDataKind.ANY);
         Mockito.when(intItemType.getTypeID()).thenReturn(Types.INTEGER);
 
-        Mockito.when(arrayIntItemType.getFullTypeName()).thenReturn("test_arrayIntItemType");
+//        Mockito.when(arrayIntItemType.getFullTypeName()).thenReturn("test_arrayIntItemType");
         Mockito.when(arrayIntItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
         Mockito.when(arrayIntItemType.getComponentType(session.getProgressMonitor())).thenReturn(intItemType);
 
-        Mockito.when(doubleItemType.getFullTypeName()).thenReturn("test_doubleItemType");
+//        Mockito.when(doubleItemType.getFullTypeName()).thenReturn("test_doubleItemType");
         Mockito.when(doubleItemType.getDataKind()).thenReturn(DBPDataKind.NUMERIC);
         Mockito.when(doubleItemType.getTypeID()).thenReturn(Types.DOUBLE);
 
@@ -250,34 +249,34 @@ private void setupGeneralWhenMocks() throws Exception {
         Mockito.when(arrayDoubleItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
         Mockito.when(arrayDoubleItemType.getComponentType(session.getProgressMonitor())).thenReturn(doubleItemType);
 
-        Mockito.when(stringItemType.getFullTypeName()).thenReturn("test_stringItemType");
+//        Mockito.when(stringItemType.getFullTypeName()).thenReturn("test_stringItemType");
         Mockito.when(stringItemType.getDataKind()).thenReturn(DBPDataKind.STRING);
         Mockito.when(stringItemType.getTypeID()).thenReturn(Types.VARCHAR);
-        Mockito.when(stringItemType.getDataSource()).thenReturn(dataSource);
+//        Mockito.when(stringItemType.getDataSource()).thenReturn(dataSource);
 
-        Mockito.when(arrayStringItemType.getFullTypeName()).thenReturn("test_arrayStringItemType");
+//        Mockito.when(arrayStringItemType.getFullTypeName()).thenReturn("test_arrayStringItemType");
         Mockito.when(arrayStringItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
         Mockito.when(arrayStringItemType.getComponentType(session.getProgressMonitor())).thenReturn(stringItemType);
 
-        Mockito.when(structItemType.getFullTypeName()).thenReturn("test_structItemType");
-        Mockito.when(structItemType.getDataKind()).thenReturn(DBPDataKind.STRUCT);
-        Mockito.when(structItemType.getTypeID()).thenReturn(Types.STRUCT);
+//        Mockito.when(structItemType.getFullTypeName()).thenReturn("test_structItemType");
+//        Mockito.when(structItemType.getDataKind()).thenReturn(DBPDataKind.STRUCT);
+//        Mockito.when(structItemType.getTypeID()).thenReturn(Types.STRUCT);
 
-        Mockito.when(arrayStructItemType.getFullTypeName()).thenReturn("test_arrayStructItemType");
-        Mockito.when(arrayStructItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
-        Mockito.when(arrayStructItemType.getComponentType(session.getProgressMonitor())).thenReturn(structItemType);
+//        Mockito.when(arrayStructItemType.getFullTypeName()).thenReturn("test_arrayStructItemType");
+//        Mockito.when(arrayStructItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
+//        Mockito.when(arrayStructItemType.getComponentType(session.getProgressMonitor())).thenReturn(structItemType);
 
-        Mockito.when(booleanItemType.getFullTypeName()).thenReturn("test_booleanItemType");
+//        Mockito.when(booleanItemType.getFullTypeName()).thenReturn("test_booleanItemType");
         Mockito.when(booleanItemType.getDataKind()).thenReturn(DBPDataKind.BOOLEAN);
         Mockito.when(booleanItemType.getTypeID()).thenReturn(Types.BOOLEAN);
 
-        Mockito.when(arrayBooleanItemType.getFullTypeName()).thenReturn("test_arrayBooleanItemType");
+//        Mockito.when(arrayBooleanItemType.getFullTypeName()).thenReturn("test_arrayBooleanItemType");
         Mockito.when(arrayBooleanItemType.getDataKind()).thenReturn(DBPDataKind.ARRAY);
         Mockito.when(arrayBooleanItemType.getComponentType(session.getProgressMonitor())).thenReturn(booleanItemType);
 
-        Mockito.when(dataFormatterProfile.createFormatter(DBDDataFormatter.TYPE_NAME_NUMBER, doubleItemType)).thenReturn(numberDataFormatter);
+//        Mockito.when(dataFormatterProfile.createFormatter(DBDDataFormatter.TYPE_NAME_NUMBER, doubleItemType)).thenReturn(numberDataFormatter);
 
-        Mockito.when(dbdFormatSettings.getDataFormatterProfile()).thenReturn(dataFormatterProfile);
+//        Mockito.when(dbdFormatSettings.getDataFormatterProfile()).thenReturn(dataFormatterProfile);
     }
 
 }
diff --git a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreDialectFunctionsTest.java b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreDialectFunctionsTest.java
index 14d7bfa9d4a..5c50d79782c 100644
--- a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreDialectFunctionsTest.java
+++ b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreDialectFunctionsTest.java
@@ -31,7 +31,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.sql.Types;
 
@@ -220,7 +220,7 @@ public void generateCorrectDataTypeNameFromNCRHARDataType() {
     public void generateCorrectDataTypeNameWithModifiersFromNUMBERWithoutModifiers() {
         Mockito.when(mockTypedObject.getTypeName()).thenReturn("number");
         Mockito.when(mockTypedObject.getPrecision()).thenReturn(null);
-        Mockito.when(mockTypedObject.getScale()).thenReturn(null);
+//        Mockito.when(mockTypedObject.getScale()).thenReturn(null);
         String actualDataType = postgreDialect.convertExternalDataType(postgreDialect, mockTypedObject, testDataSource);
         Assert.assertEquals("numeric", actualDataType);
     }
diff --git a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreServerExtensionBaseTest.java b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreServerExtensionBaseTest.java
index cb2fee288df..6b42aac82ef 100644
--- a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreServerExtensionBaseTest.java
+++ b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreServerExtensionBaseTest.java
@@ -21,7 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.when;
diff --git a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreTableBaseTest.java b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreTableBaseTest.java
index 52ea0270a60..034d8464656 100644
--- a/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreTableBaseTest.java
+++ b/test/org.jkiss.dbeaver.ext.postgresql.test/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreTableBaseTest.java
@@ -35,7 +35,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.Collections;
 import java.util.List;
@@ -83,10 +83,10 @@ public PostgreDataType getLocalDataType(String typeName) {
 
         Mockito.when(mockDataSourceContainer.getPreferenceStore()).thenReturn(DBWorkbench.getPlatform().getPreferenceStore());
 
-        Mockito.when(mockResults.getString("relname")).thenReturn("sampleTable");
-        long sampleId = 111111;
-        Mockito.when(mockResults.getLong("oid")).thenReturn(sampleId);
-        Mockito.when(mockResults.getLong("relowner")).thenReturn(sampleId);
+//        Mockito.when(mockResults.getString("relname")).thenReturn("sampleTable");
+//        long sampleId = 111111;
+//        Mockito.when(mockResults.getLong("oid")).thenReturn(sampleId);
+//        Mockito.when(mockResults.getLong("relowner")).thenReturn(sampleId);
 
         postgreExecutionContext = new PostgreExecutionContext(testDatabase, "Test");
 
diff --git a/test/org.jkiss.dbeaver.parser.test/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.parser.test/META-INF/MANIFEST.MF
index 15c69ac9cdb..7f9efb35c3e 100644
--- a/test/org.jkiss.dbeaver.parser.test/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.parser.test/META-INF/MANIFEST.MF
@@ -9,5 +9,5 @@ Bundle-Vendor: %Bundle-Vendor
 Bundle-ClassPath: .
 Automatic-Module-Name: org.jkiss.dbeaver.parser.common.test
 Require-Bundle: org.jkiss.dbeaver.parser.common,
- org.mockito.mockito-all,
+ org.mockito.mockito-core,
  org.junit
diff --git a/test/org.jkiss.dbeaver.parser.test/src/org/jkiss/dbeaver/parser/common/test/ParserTest.java b/test/org.jkiss.dbeaver.parser.test/src/org/jkiss/dbeaver/parser/common/test/ParserTest.java
index e012306fba8..098916c91c2 100644
--- a/test/org.jkiss.dbeaver.parser.test/src/org/jkiss/dbeaver/parser/common/test/ParserTest.java
+++ b/test/org.jkiss.dbeaver.parser.test/src/org/jkiss/dbeaver/parser/common/test/ParserTest.java
@@ -19,7 +19,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.jkiss.dbeaver.parser.common.grammar.ExpressionFactory.*;
 
diff --git a/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
index 6eab876a0cb..13253e7b327 100644
--- a/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
@@ -10,7 +10,7 @@ Bundle-ActivationPolicy: lazy
 Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.core.resources,
  org.junit,
- org.mockito.mockito-all,
+ org.mockito.mockito-core,
  org.apache.felix.scr,
  org.jkiss.dbeaver.model,
  org.jkiss.dbeaver.model.sql,
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBUtilsTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBUtilsTest.java
index d4b5407a9ed..a920c3c8266 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBUtilsTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBUtilsTest.java
@@ -27,7 +27,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 @RunWith(MockitoJUnitRunner.class)
 public class DBUtilsTest {
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBValueFormattingTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBValueFormattingTest.java
index 56a751e1fed..7cc420a96f5 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBValueFormattingTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DBValueFormattingTest.java
@@ -16,8 +16,6 @@
  */
 package org.jkiss.dbeaver.model;
 
-import static org.mockito.Mockito.mock;
-
 import org.jkiss.dbeaver.model.struct.DBSEntity;
 import org.jkiss.dbeaver.model.struct.DBSEntityAssociation;
 import org.jkiss.dbeaver.model.struct.DBSObject;
@@ -28,7 +26,9 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import static org.mockito.Mockito.mock;
 
 @RunWith(MockitoJUnitRunner.class)
 public class DBValueFormattingTest {
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DataTypeConverterTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DataTypeConverterTest.java
index 51f4c5a8544..de5e496e35d 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DataTypeConverterTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/DataTypeConverterTest.java
@@ -26,7 +26,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 @RunWith(MockitoJUnitRunner.class)
 public class DataTypeConverterTest {
@@ -43,7 +43,7 @@ public class DataTypeConverterTest {
     @Before
     public void setUp() throws Exception {
         dialect = new JDBCSQLDialect("testName", "testID");
-        Mockito.when(mockDataSource.getSQLDialect()).thenReturn(dialect);
+        Mockito.lenient().when(mockDataSource.getSQLDialect()).thenReturn(dialect);
     }
 
     @Test
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/data/transformers/EpochTimeAttributeTransformerTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/data/transformers/EpochTimeAttributeTransformerTest.java
index 7ef369aa571..512dc984ef2 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/data/transformers/EpochTimeAttributeTransformerTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/data/transformers/EpochTimeAttributeTransformerTest.java
@@ -34,7 +34,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.Collections;
 import java.util.HashMap;
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/DatabaseContainerBuilder.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/DatabaseContainerBuilder.java
index 4b46c032c68..6993c6747af 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/DatabaseContainerBuilder.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/DatabaseContainerBuilder.java
@@ -22,7 +22,7 @@
 import org.jkiss.dbeaver.model.DBUtils;
 import org.jkiss.dbeaver.model.struct.DBSObjectContainer;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -37,7 +37,7 @@ public DatabaseContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull Stri
         when(container.getName()).thenReturn(name);
         when(container.getPrimaryChildType(any())).thenReturn(null);
         when(container.getChildren(any())).then(x -> children);
-        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgumentAt(1, String.class)));
+        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgument(1, String.class)));
     }
 
     @NotNull
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/SchemaContainerBuilder.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/SchemaContainerBuilder.java
index c516d1a85e9..71a5b4309b0 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/SchemaContainerBuilder.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/SchemaContainerBuilder.java
@@ -23,7 +23,7 @@
 import org.jkiss.dbeaver.model.struct.DBSObject;
 import org.jkiss.dbeaver.model.struct.DBSObjectContainer;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -38,7 +38,7 @@ public SchemaContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull DBSObj
         when(container.getName()).thenReturn(name);
         when(container.getPrimaryChildType(any())).thenReturn(null);
         when(container.getChildren(any())).then(x -> children);
-        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgumentAt(1, String.class)));
+        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgument(1, String.class)));
     }
 
     public SchemaContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull String name) throws DBException {
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableAttributeContainerBuilder.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableAttributeContainerBuilder.java
index 455779167f4..81e3dffd997 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableAttributeContainerBuilder.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableAttributeContainerBuilder.java
@@ -26,7 +26,7 @@
 import org.jkiss.dbeaver.model.struct.DBSEntityType;
 import org.jkiss.dbeaver.model.struct.DBSObject;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -41,7 +41,7 @@ public TableAttributeContainerBuilder(@NotNull DBPDataSource dataSource, @NotNul
         when(entity.getName()).thenReturn(name);
         when(entity.getEntityType()).thenReturn(DBSEntityType.TABLE);
         when(entity.getAttributes(any())).then(x -> children);
-        when(entity.getAttribute(any(), any())).then(x -> DBUtils.findObject(children, x.getArgumentAt(1, String.class)));
+        when(entity.getAttribute(any(), any())).then(x -> DBUtils.findObject(children, x.getArgument(1, String.class)));
     }
 
     public TableAttributeContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull String name) throws DBException {
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableContainerBuilder.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableContainerBuilder.java
index 33eb4718cec..ef1bd035a65 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableContainerBuilder.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/TableContainerBuilder.java
@@ -24,7 +24,7 @@
 import org.jkiss.dbeaver.model.struct.DBSObject;
 import org.jkiss.dbeaver.model.struct.DBSObjectContainer;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -39,7 +39,7 @@ public TableContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull DBSObje
         when(container.getName()).thenReturn(name);
         when(container.getPrimaryChildType(any())).thenReturn(null);
         when(container.getChildren(any())).then(x -> children);
-        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgumentAt(1, String.class)));
+        when(container.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgument(1, String.class)));
     }
 
     public TableContainerBuilder(@NotNull DBPDataSource dataSource, @NotNull String name) throws DBException {
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/request/RequestBuilder.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/request/RequestBuilder.java
index a9cf5149b82..c117fe413d7 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/request/RequestBuilder.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/builder/request/RequestBuilder.java
@@ -31,7 +31,7 @@
 
 import java.util.List;
 
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -86,7 +86,7 @@ public RequestResult prepare() throws DBException {
 
         when(dataSource.getSQLDialect()).thenReturn(dialectRegistry.getDialect("generic").createInstance());
         when(dataSource.getContainer()).thenReturn(dataSourceContainer);
-        when(dataSource.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgumentAt(1, String.class)));
+        when(dataSource.getChild(any(), any())).then(x -> DBUtils.findObject(children, x.getArgument(1, String.class)));
         when(dataSource.getChildren(any())).then(x -> children);
 
         return new RequestResult(dataSource);
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/format/tokenized/SQLFormatterTokenizedTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/format/tokenized/SQLFormatterTokenizedTest.java
index 3837ad48d56..0acb2687492 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/format/tokenized/SQLFormatterTokenizedTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/format/tokenized/SQLFormatterTokenizedTest.java
@@ -29,7 +29,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.junit.Assert.assertEquals;
 
@@ -140,8 +140,8 @@ public void shouldAddLineBreakBeforeBraceBySpecialSetting() {
         String expectedString = getExpectedStringWithLineBreakBeforeBraces();
         String inputString = "SELECT (SELECT thecol FROM thetable) FROM dual";
 
-        Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);
-        Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);
+        Mockito.lenient().when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);
+        Mockito.lenient().when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);
 
         //when
         String formattedString = format(inputString);
@@ -157,8 +157,8 @@ public void shouldAddIndentForName() {
         String expectedString = "SELECT"+lineBreak + "\tmy_field" + lineBreak + "FROM" + lineBreak + "\tmy_table";
         String inputString = "SELECT my_field FROM my_table";
 
-        Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);
-        Mockito.when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);
+        Mockito.lenient().when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_LF_BEFORE_COMMA))).thenReturn(false);
+        Mockito.lenient().when(preferenceStore.getBoolean(Mockito.eq(ModelPreferences.SQL_FORMAT_BREAK_BEFORE_CLOSE_BRACKET))).thenReturn(true);
 
         //when
         String formattedString = format(inputString);
@@ -546,7 +546,7 @@ public void shouldDoDefaultFormatForSimpleSelectAndCaseEndConditionInOrderBlock(
             "\t\tELSE City" + lineBreak +
             "\tEND)";
 
-        Mockito.when(configuration.isFunction("AVG")).thenReturn(true);
+        Mockito.lenient().when(configuration.isFunction("AVG")).thenReturn(true);
 
         //when
         String formattedString = format(inputString);
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
index 10e5a9f41cc..d739fe68da2 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
@@ -39,7 +39,8 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
+
 import java.util.List;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -64,11 +65,11 @@ public void init() {
         DBPConnectionConfiguration connectionConfiguration = new DBPConnectionConfiguration();
         DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();
         Mockito.when(dataSource.getContainer()).thenReturn(dataSourceContainer);
-        Mockito.when(dataSourceContainer.getConnectionConfiguration()).thenReturn(connectionConfiguration);
-        Mockito.when(dataSourceContainer.getActualConnectionConfiguration()).thenReturn(connectionConfiguration);
+        Mockito.lenient().when(dataSourceContainer.getConnectionConfiguration()).thenReturn(connectionConfiguration);
+        Mockito.lenient().when(dataSourceContainer.getActualConnectionConfiguration()).thenReturn(connectionConfiguration);
         Mockito.when(dataSourceContainer.getPreferenceStore()).thenReturn(preferenceStore);
         Mockito.when(dataSourceContainer.getDriver()).thenReturn(driver);
-        Mockito.when(executionContext.getDataSource()).thenReturn(dataSource);
+        Mockito.lenient().when(executionContext.getDataSource()).thenReturn(dataSource);
         Mockito.when(driver.getDriverParameter(Mockito.anyString())).thenReturn(null);
         Mockito.when(dataSource.getMetaModel()).thenReturn(metaModel);
         Mockito.when(metaModel.supportsUpsertStatement()).thenReturn(false);
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
index 27317d50308..659d7fb22f3 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
@@ -38,7 +38,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -65,10 +65,10 @@ public void init() {
         DBPConnectionConfiguration connectionConfiguration = new DBPConnectionConfiguration();
         DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();
         Mockito.when(dataSource.getContainer()).thenReturn(dataSourceContainer);
-        Mockito.when(dataSourceContainer.getConnectionConfiguration()).thenReturn(connectionConfiguration);
+        Mockito.lenient().when(dataSourceContainer.getConnectionConfiguration()).thenReturn(connectionConfiguration);
         Mockito.when(dataSourceContainer.getActualConnectionConfiguration()).thenReturn(connectionConfiguration);
         Mockito.when(dataSourceContainer.getPreferenceStore()).thenReturn(preferenceStore);
-        Mockito.when(executionContext.getDataSource()).thenReturn(dataSource);
+        Mockito.lenient().when(executionContext.getDataSource()).thenReturn(dataSource);
         Mockito.when(dataSourceContainer.getDriver()).thenReturn(driver);
     }
 
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TokenPredicatesConditionTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TokenPredicatesConditionTest.java
index 7e2f5217a42..8ff6974994f 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TokenPredicatesConditionTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TokenPredicatesConditionTest.java
@@ -16,13 +16,15 @@
  */
 package org.jkiss.dbeaver.model.sql.parser;
 
-import org.jkiss.dbeaver.model.sql.parser.tokens.predicates.*;
+import org.jkiss.dbeaver.model.sql.parser.tokens.predicates.TokenPredicateFactory;
+import org.jkiss.dbeaver.model.sql.parser.tokens.predicates.TokenPredicateNode;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
-import java.util.*;
+import java.util.List;
+import java.util.Set;
 import java.util.stream.Collectors;
 
 @RunWith(MockitoJUnitRunner.class)
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TrieTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TrieTest.java
index cbf3c5370c8..a13b5a46b45 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TrieTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/TrieTest.java
@@ -21,7 +21,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.util.*;
 import java.util.stream.Collectors;
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/tools/transfer/CSVImporterTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/tools/transfer/CSVImporterTest.java
index eb0a42cb7bb..b34a1af8602 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/tools/transfer/CSVImporterTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/tools/transfer/CSVImporterTest.java
@@ -28,7 +28,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.Mockito;
-import org.mockito.runners.MockitoJUnitRunner;
+import org.mockito.junit.MockitoJUnitRunner;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
